pipeline {
    
    agent any

    environment {
        DOCKER_IMAGE = 'rdoneux/dd3.5-cs-spa'
        RAILWAY_TOKEN = credentials("DD_RAILWAY_TOKEN")
        RAILWAY_SERVICE_ID = 'fa8512e5-8a40-4e96-aa0c-2fbbc0091348'
        // PULUMI_STACK_BUCKET = "tplt-web-spa-pulumi?region=eu-west-2"

        // can use "pulumi stack -Q" to find this
        // PULUMI_STACK = "organization/tplt-web-spa/dev"
    }

    stages {
            stage ("Setup") {
                steps {
                    sh "npm i"
                }
                post {
                    success {
                        echo "Setup success"
                    }
                    failure {
                        echo "Setup failure"
                    }
                }
                
            }

            stage ("Build") {
                steps {
                    sh "npm run build"
                }
                post {
                    success {
                        echo "Build success"
                    }
                    failure {
                        echo "Build failure"
                    }
                }
            }

            stage ("Quality Gate: Static Analysis") {
                steps {
                    sh "npm run lint:ci"
                    sh "npm run prettier:ci"
                }
                post {
                    success {
                        echo "Static Analysis Success"
                    }
                    failure {
                        echo "Static Analysis Failure"
                    }
                }
            }

            stage ("Quality Gate: Composition Analysis") {
                steps {
                    sh "npm run test:ci"
                }
                post {
                    success {
                        echo "Quality composition analysis success"
                    }
                    failure {
                        echo "Quality composition analysis failure"
                    }
                }
            }

            stage ("Report") {
                steps {
                    clover(cloverReportDir: '../dist/coverage', cloverReportFileName: 'clover.xml',
                      healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                      unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                      failingTarget: [methodCoverage: 25, conditionalCoverage: 25, statementCoverage: 25]
                    )
                    junit 'dist/junit/junit.xml'
                }
                post {
                    success {
                        echo "Repot success"
                    }
                    failure {
                        echo "Report failure"
                    }
                }
            }

            stage ("Publish to Docker Hub") {
                when {
                    anyOf{
                        branch 'master'
                    }
                }
                steps {
                    script {
                        def packageJson = readJSON(file: 'package.json')
                        env.VERSION = packageJson.version
                        env.IMAGE_TAG = "${env.BRANCH_NAME}-v${env.VERSION}"

                        sh "docker build -t $DOCKER_IMAGE:${env.IMAGE_TAG} ."
                    }
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                        sh "docker push $DOCKER_IMAGE:${env.IMAGE_TAG}"
                    }
                }
                post {
                    always {
                        sh "docker rmi $DOCKER_IMAGE:${env.IMAGE_TAG} || true"                   
                    } 
                }
            }

            stage ("Deploy") {
                when {
                    branch 'master'
                }
                steps {
                    script {
                        sh 'npm i @railway/cli'
                        env.PATH = "${env.WORKSPACE}/node_modules/.bin:${env.PATH}"
                        sh "railway up --detach --service ${RAILWAY_SERVICE_ID}"
                    }
                }
            }
    }
}
